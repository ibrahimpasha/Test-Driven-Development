Assign3: Due 11:59PM October 25

An agency provides background check service. Given a candidate they can verify
various things: credit, criminal records, employment verification, citizenship 
check, etc. There may be more things they can verify in the future.

To make things easy we will use social security number to represent a 
candidate.

Design a class library with the following:

A candidate can be represented using the social security number, first name, 
and last name.

Provide facility to evaluate a candidate based on various criteria selected.

The result of evaluation is either an approve or a disapprove. If it was a 
disapprove, the reason(s) are provided. The result of evaluation should be
candidate's full name, their social security number, and the result of the 
evaluation, along with reasons for rejection.

Design the library so that a user of the library can decide which criteria to
use for evaluation. They can select one or more criteria. They can also 
provide their own criteria beyond what the library provides.

For each of the criteria (for example to check criminal records) we will 
pretend that such code can be implemented by talking to a database or a web 
service. For the purpose of this exercise we will generate a random response 
in the code for the analysis of a criteria like criminal record.

Let's focus on the following after the coding is completed:

1. What design principles did we use in this assignment?

This assignment mainly concerned Open Closed Principle. We needed to write the
code such that it was open for extension but closed for modification. The way
it is currently written, you simply create a class with an evaluate_criteria
function to extend it's functionality. The background check file and function 
don't have to be modified. To a lesser degree, we used Single Responsibility 
Principle and Don't Repeat Yourself throughout. The classes and functions have
one purpose, do it well, and there's a minimal amount of repeated code.

2. What were some of the challenges you ran into when creating the program?

I think the main challenge was creating the main background checking functionality
without violating OCP. It is easy to "hard code" in the criteria classes. It is 
challenging to set up the code for extensibility. It takes a new way of thinking.
In our case, we made this functionality through a simple stand-alone function.

3. Were there any surprises or unexpected learnings?

One of our current suprises is that extremely succint code can do so much. We
keep being suprised by how much "fat" can be trimmed from the code. Every time
we refactor, we learn what not to do or the code gets better.

